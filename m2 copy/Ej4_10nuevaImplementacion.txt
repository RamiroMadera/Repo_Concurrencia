10.Resolver con PMS (Pasaje de Mensajes SINCRÓNICOS) el siguiente problema. En un
estadio de fútbol hay una máquina expendedora de gaseosas que debe ser usada por E
Espectadores de acuerdo al orden de llegada. Cuando el espectador accede a la máquina en
su turno usa la máquina y luego se retira para dejar al siguiente. Nota: cada Espectador una
sólo una vez la máquina.

process espectador[id:1..E]{
    admin!acceso(id);
    admin?pasar();
    //acceder a la maquina
    admin!liberar();
}

process admin{
    int Eid;
    bool libre=true;
    cola c;
    do
        espectador[*]?acceso(Eid)   ->  if(libre){
                                            libre = false;
                                            espectador[Eid]!pasar();
                                        } else {
                                            push(c,Eid);
                                        }
        espectador[*]?liberar()     -> if (not empty(c)){
                                            pop(c,Eid);
                                            espectador[Eid]!pasar();
                                        } else 
                                            libre=true;
    od
}

=======================================IMPLEMENTACIÓN ANTERIOR=======================================================================================

Process espectador[id:0..E-1]{
    admin!encolar(id);
    admin!pedido();
    admin?autorizacion();
    //usa la maquina
    admin!liberar();
}

Process admin{
    cola c;
    int Eid;
    bool libre=true;
    do  espectador[*]?encolar(id)               -> push(c,Eid)
        libre = true; espectador[*]?pedido(id)  -> libre = false        //no hace falta preguntar si la cola está vacía ya que siempre va a tener
                                                  pull(c,Eid)           //espectadores si éstos estan en el momento de enviar mensajes de "pedido"
                                                  espectador[Eid]!autorizacion();
        espectador[*]?liberar                   -> libre = true;
    od
}