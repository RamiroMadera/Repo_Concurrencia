8. Resolver con PMS (Pasaje de Mensajes SINCRÓNICOS) el siguiente problema. En un
examen final hay P alumnos y 3 profesores. Cuando todos los alumnos han llegado
comienza el examen. Cada alumno resuelve su examen, lo entrega y espera a que alguno de
los profesores lo corrija y le indique la nota. Los profesores corrigen los exámenes
respectando el orden en que los alumnos van entregando. Nota: maximizar la concurrencia
y no generar demora innecesaria.

process alumno[id:1..P]{
    text e;
    int n;
    admin!llegada();
    admin?empezar();

    resolver(e);
    admin!entrega(e,id);
    profesor[*]?nota(n);
}

process admin{
    cola c;
    text e;
    int Aid,Pid;

    for(i:1..P)
        alumno[*]?llegada();
    for(i:1..P)
        alumno[i]!empezar();

    do  
        alumno[*]?entrega(e,id) -> push(c,(e,Aid));
        not empty(c); profesor[*]?pedido(Pid) -> pop(c,(e,Aid));
                                                 profesor[Pid]!respuesta(e,Aid);
    od
}

process profesor[id:1..3]{
    int Aid,n;
    text e;
    while(true){
        admin!pedido(id);
        admin?respuesta(e,Aid);

        corregir(e,n);
        alumno[Aid]!nota(n);
    }
}





































process alumno[id:0..P-1]{
    text e;
    int n;
    admin!llegada();
    admin?comienzo();
    
    //comenzar examen

    admin!examenTerminado(id,e);
    profesor?nota(n);
}

process admin{
    cola c;
    text e;
    int Aid,Pid;
    for(i:0..P-1)
        alumno[*]?llegada();
    for(i:0..P-1)
        alumno[i]!comienzo();
    

    do  alumno?examenTerminado(Aid,e);   -> push(c,Aid,e);
        not empty(c); profesor[*]?pedido(Pid); -> pull(c,Aid,e);
                                                  profesor[Pid]!envio(Aid,e); 
    od
}

process profesor[id:0..2]{
    int Aid,n;
    texto e;
    while(true){
        admin!pedido(id);
        admin?envio(Aid,e);
        corregir(examen);
        alumno[Aid]!nota(n);
    }
}