7. En una herrería hay 15 empleados que forman 5 grupos de 3 personas; los grupos se forman
de acuerdo al orden de llegada (los 3 primeros pertenecen al grupo 1, los 3 siguientes al grupo
2, y así sucesivamente). Ni bien conoce el grupo al que pertenece el empleado comienza a
trabajar (no debe esperar al resto de grupo para comenzar). Cada grupo debe hacer
exactamente P unidades de un producto (cada unidad es hecha por un único empleado). Al
terminar de hacer las P unidades de un grupo, sus 3 empleados se retiran. Nota: maximizar
la concurrencia; ningún grupo puede hacer unidades de más.

bool libre = true;
cola c;
sem mutex = 1;
int grupo[5] = ([5] 3);         //vector que primero se usa para crear los grupos y luego para contar la cantidad de unidades creadas
int grupoAct = 1;               //variable compartida para asignar los grupos
sem mutex[5] = ([5] 1);         //mutex privados a cada grupo para modificar el contador de productos

sem barrera[5] = ([5] 0);
sem mutexlis[5] = ([5] 1);
int lis[5] = ([5] 0);

process empleado [id: 0..14]{
    int grupo, aux;

    P(mutex);
    if(libre){libre = false; V(mutex);
    }else{push(c, id); V(mutex); P(esperar[id]);}

    grupo = grupoAct;           //asigna el grupo
    grupo[grupo-1]--;             //decremento la cantidad de vacantes
    if (grupo[grupo-1] == 0){
        grupoAct++;             //en caso de que no hayan más cupos en el grupo, actualizo grupoAct
    }

    P(mutex);
    if(empty(c)){libre = true;}
    else{pop(c,aux); V(espera[aux]);}
    V(mutex);

    P(mutex[grupo]);

    while(grupo[grupo] < P){    //chequea si su grupo ya fabricó todas las unidades (o está terminando de fabricarlas)
        grupo[grupo]++;         //aumenta en uno la cantidad de unidades asociada a su propio grupo
        V(mutex[grupo]);

        //fabrica un producto

        P(mutex[grupo]);
    }
    V(mutex[grupo]);

    P(mutexlis[grupo]);
    lis[grupo]++;
    if (lis[grupo] == 5)
        for(i=0..4) V(barrera[grupo]);
    P(mutexlis[grupo]);
    P(barrera[grupo]);

}