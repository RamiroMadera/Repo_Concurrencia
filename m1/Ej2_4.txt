4. Existen N personas que deben fotocopiar un documento cada una. Resolver cada ítem
usando semáforos:
a) Implemente una solución suponiendo que existe una única fotocopiadora compartida
por todas las personas, y las mismas la deben usar de a una persona a la vez, sin importar
el orden. Existe una función Fotocopiar() llamada por la persona que simula el uso de la
fotocopiadora. Sólo se deben usar los procesos que representan a las Personas.

sem mutex = 1;

process persona[id: 0..N-1]{
    P(mutex);
    Fotocopiar();
    V(mutex);
}

b) Modifique la solución de (a) para el caso en que se deba respetar el orden de llegada.

cola c;
sem mutex = 1;
sem lib[N] = ([N] 0);
boolean libre = true;

process persona[id: 0..N-1]{
    int aux;
    P(mutex);
    if (libre) {
        libre = false;
        V(mutex);
    } else {
        encolar(c, id); 
        V(mutex);
        P(lib[id]);
    }
    Fotocopiar();
    P(mutex);
    if(empty(C)){
        libre = true;
    } else {
        desencolar(c, aux);
        V(lib[aux]);
    }
    V(mutex);
}





---------------------------------------------
cola c;
sem mutex = 1;
sem lib[N] = ([N] 0);
boolean libre = true;

process persona[id: 0..N-1]{
    int aux;

    P(mutex);
    encolar(c,id);
    V(mutex);

    P(mutex);
    desencolar(c, aux);
    V(lib[aux]);
    V(mutex);

    if(length(c) == 1){
        desencolar(c, aux);
        Fotocopiar();
        V(mutex);
    } else {
        desencolar(c, aux);
        V(lib[aux]);
        V(mutex);
        P(lib[id]);
        Fotocopiar();

    }
}

c) Modifique la solución de (b) para el caso en que se deba dar prioridad de acuerdo a la
edad de cada persona (cuando la fotocopiadora está libre la debe usar la persona de mayor
edad entre las que estén esperando para usarla).

cola c;
sem mutex = 1;
sem lib[N] = ([N] 0);
boolean libre = true;

process persona[id: 0..N-1]{
    int aux;
    int edad = rand() % 100;
    P(mutex);
    if (libre) {
        libre = false;
        V(mutex);
    } else {
        encolarOrdenado(c, id, edad);     --Preguntar
        V(mutex);
        P(lib[id]);
    }
    Fotocopiar();
    P(mutex);
    if(empty(C)){
        libre = true;
    } else {
        desencolar(c, aux);
        V(lib[aux]);
    }
    V(mutex);
}


d) Modifique la solución de (a) para el caso en que se deba respetar estrictamente el orden
dado por el identificador del proceso (la persona X no puede usar la fotocopiadora hasta
que no haya terminado de usarla la persona X-1).

sem espera[N] = ([N] 0);

process persona[id: 0..N-1]{
    if(id=0){
        Fotocopiar();
    } else {
        P(espera[id]);
        Fotocopiar();
    }
    V(espera[id+1]);
}

e) Modifique la solución de (b) para el caso en que además haya un Empleado que le indica
a cada persona cuando debe usar la fotocopiadora.

cola c;
sem mutex = 1;
sem espera[N] = ([N] 0);
sem libre = 1;
sem pedidos = 0;

process persona[id: 0..N-1]{
    P(mutex);
    push(c);
    V(mutex);
    V(pedidos);
    P(espera[id]);
    Fotocopiar();
    V(libre);
}

process empleado {
    int aux, cantFaltante = N;
    while (cantFaltante > 0){
        P(pedidos);
        P(mutex);
        pull(c, aux);
        V(mutex);
        V(espera[aux]);
        P(libre);
        cantFaltante--;
    }
}

f) Modificar la solución (e) para el caso en que sean 10 fotocopiadoras. El empleado le indica
a la persona cuando puede usar una fotocopiadora, y cual debe usar.

cola c;
cola cf;
sem mutex = 1, mutex2 = 1;
sem espera[N] = ([N] 0);
int numFot[N];
sem libre = 10;
sem pedidos = 0;


process persona[id: 0..N-1]{
    int fid;

    P(mutex);
    push(c);
    V(mutex);

    V(pedidos);
    P(espera[id]);
    fid = numFot[id]
    Fotocopiar(fid);

    P(mutex2);
    push(cf,fid);
    V(mutex2);

    V(libre);
}

process empleado {    
    int pid, cantFaltante = N;
    int fid;

    for (i = 0..9){
        push(cf,i);             -- cola que va a contener la impresoras libres;
    }

    while (cantFaltante > 0){
        P(pedidos);
        P(mutex);
        pull(c, pid);
        V(mutex);

        P(libre);
        P(mutex2);
        pull(cf,fid);
        V(mutex2);

        numFot[pid] = fid;
        V(espera[pid]);
        cantFaltante--;
    }
}
