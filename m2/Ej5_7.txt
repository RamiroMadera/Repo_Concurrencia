7. Hay un sistema de reconocimiento de huellas dactilares de la policía que tiene 8 Servidores
para realizar el reconocimiento, cada uno de ellos trabajando con una Base de Datos propia;
a su vez hay un Especialista que utiliza indefinidamente. El sistema funciona de la
siguiente manera: el Especialista toma una imagen de una huella (TEST) y se la envía a los
servidores para que cada uno de ellos le devuelva el código y el valor de similitud de la
huella que más se asemeja a TEST en su BD; al final del procesamiento, el especialista debe
conocer el código de la huella con mayor valor de similitud entre las devueltas por los 8
servidores. Cuando ha terminado de procesar una huella comienza nuevamente todo el
ciclo. Nota: suponga que existe una función Buscar(test, código, valor) que utiliza cada Servidor
donde recibe como parámetro de entrada la huella test, y devuelve como parámetros de
salida el código y el valor de similitud de la huella más parecida a test en la BD correspondiente.
Maximizar la concurrencia y no generar demora innecesaria.

PROCEDURE policia IS

TASK TYPE servidores IS 
    ENTRY analizar(T: IN muestra);
END servidores;
TASK especialista IS
    ENTRY res(c: IN int; v: IN int);
END especialista;

servidor:ARRAY(1..8) OF servidores;

TASK BODY servidores IS
    TEST:muestra;
    c,v:int;
BEGIN
    LOOP
        ACCEPT analizar(T: IN muestra) DO
            TEST:=T;
        END analizar;
        Buscar(TEST,c,v);
        especialista.res(c,v);
    END LOOP;
END servidores;

TASK BODY especialista IS
    TEST:muestra;
    codMax,valMax:int;
BEGIN
    LOOP
        valMax:=0;
        TEST:=generarImagen();
        for i in 1..8 loop
            servidor(i).analizar(T);
        end loop;
        for i in i..8 loop
            ACCEPT res(c: IN int; v: IN int) DO
                if(v>valMax) do
                    valMax:=v;
                    codMax:=c;
                end if;
            END res;
        end loop;

        guardar(codMax);
    END LOOP;

END especialista;

BEGIN
    null;
END policia;