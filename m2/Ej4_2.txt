2. Se desea modelar el funcionamiento de un banco en el cual existen 5 cajas para realizar
pagos. Existen P personas que desean pagar. Para esto cada una selecciona la caja donde
hay menos personas esperando, una vez seleccionada espera a ser atendido.
NOTA: maximizando la concurrencia.

Chan cualCaja(int);
Chan espera[0..4](int);
Chan privado[0..P-1](int);
Chan avisoAlAdmin(int);

Process Persona[id: 0..P-1]{
    int caja, aux;

    send cualCaja(id);
    send avisoAlAdmin(1);
    receive privado[id](caja);

    send espera[caja](id);
    receive privado[id](aux);
    //es atendido
}

Process admin{
    int Pid, Cid;
    int esPersona;
    int cant[0..4] = ([5] 0);
    int min;
    int posMin;

    while (true){
        receive avisoAlAdmin(esPersona);

        if(esPersona == 1){
            receive cualCaja(Pid);
            min=cant[0];
            posMin=0;
            for i=1..4{
                if(min>cant[i]){
                    min=cant[i];
                    posMin=i;
                }
            }
            send privado[Pid](posMin);
            cant[posMin]++;
        } else {
            receive unoMenos(Cid);
            cant[Cid]--;
        }

    }
}

Process caja[id:0..4]{
    int Pid;
    while(true){
        receive espera[id](Pid);
        send unoMenos(id);
        send avisoAlAdmin(0);

        send privado[Pid](0);
        //atiende a la persona
    }
}











----------------- (Borrador descartado) ----------------------
Chan cuantos[0..4](int);
Chan pedido[0..4](int);
Chan privado[0..P-1](int);

Process Persona[id: 0..P-1]{
    int min=9999;
    int posMin=0;
    int aux;

    for i=0..4{
        send cuantos[i](id);
        receive privado[id](aux);
        if(min>aux){
            min=aux;
            posMin=i;
        }
    }

    send pedido[posMin](id);
}

Process admin